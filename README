 - StreetMap.java is the class that brings everything together with a main method and the dijkstra's algorithm.
 - Edge.java has the information of the first and second vertex, its ID, and its weight
 - Vertex.java has the information of the longitude, latitude, ID, and it also has an adjacency Linkedlist which
   is used to collect all the adjacency vertices that connects to the specific individual vertex
 - Info.java is essentially the chart that we use for dijkstra's algorithm (node, weight, parent)
 - Haversine.java is the weight calculation formula taken from Jason Winn and Vlad
 - Canvas.java draws the map and highlights the shortest path

Essentially, there is a hashmap of vertices which has all the information of each node (each vertices
have their own adjacency linkedlist) and a hashmap of info. We use both of these to run dijkstra's algorithm.
There is an arraylist of edges so we can draw it in canvas class.
We call everything with the command line prompt and it all prints out.

One of the obstacles that we overcame was a small problem with the dijkstra's algorithm. Every time we updated the
distance because we found a shorter path, we realized that the priority queue was updated twice; thus, we had
to take out the priority queue to optimize it since we are using Dijkstra. Other obstacles were minor debugs that
were easily solved after some time. An obstacle that we were able to overcome before reaching the larger map
was by using a hashmap data structure instead of an arraylist or linkedlist because it would run a lot longer with
the bigger maps. Additionally, I used an extra class to store the variables from Dijkstra. We realized that
we can easily use Vertex class, so that optimization was huge.

The expected runtime of this algorithm is O(E + V + ElogV).
Reading the file is O(E+V). Dijkstra's algorithm is O(ElogV). Drawing is O(E + V).
